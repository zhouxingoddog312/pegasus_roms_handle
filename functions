#help information
function help()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Usage:
---------------------------------------------------------------------------------------------

EOF
}
#version information
function version()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Name: 
Version: 1.00
Author: goddog312
---------------------------------------------------------------------------------------------

EOF
}
#如果不存在源目录就创建源目录，源目录为空时提醒用户将指定文件放入源目录并退出。
#如果不存在工作目录就创建工作目录。
#保证源目录内存在待处理文件。
function haswkdir()
{
	if [ ! -d $SOURCE_DIR ] || [ "`ls -A $SOURCE_DIR`" = "" ]
	then
		mkdir $SOURCE_DIR
		echo "Put metadata.pegasus.txt and corresponding compressed package to $SOURCE_DIR. Then launch this script again."
		#SOURCE_DIR目录不存在或为空时退出脚本
		exit 0
	fi
	if [ ! -d $TRANSF_DIR ]
	then
		mkdir $TRANSF_DIR
	fi
	if [ ! -d $TARGET_DIR ]
	then
		mkdir $TARGET_DIR
	fi
}

#验证SOURCE_DIR目录内的文件
function check_source()
{
#是否有且仅有一个metadata.pegasus.txt文件
	local metadata_file_count=`find $SOURCE_DIR -name metadata.pegasus.txt|wc -l`
	if [ $metadata_file_count -lt 1 ]
	then
		echo "Need the file named metadata.pegasus.txt. Put it in the $SOURCE_DIR. Then launch this script again."
		exit 1
	elif [ $metadata_file_count -gt 1 ]
	then
		echo "More than one metadata.pegasus.txt. Delete the extra files. Then launch this script again."
		exit 1
	fi
	local metadata_file=`find $SOURCE_DIR -name metadata.pegasus.txt`
	split_metadata "$metadata_file"
#是否有tkzlm后缀的文件
#找到tkzlm后缀的文件并解压
	local compress_files_count=`find $SOURCE_DIR -name *.tkzlm|wc -l`
	if [ $compress_files_count -gt 0 ]
	then
		uncompress
	else
		echo "There's no compressed file."
	fi
}

#参数：压缩文件
#解压缩tkzlm后缀的压缩包,并删除
function uncompress()
{
	local compressed_file
	shopt -s globstar
	for compressed_file in $SOURCE_DIR/**/*.tkzlm
	do
		7z x "$compressed_file" -o$SOURCE_DIR -p跳坑者联盟 -aos
		rm -rf "$compressed_file"
	done
	shopt -u globstar
}
#分割metadata.pegasus.txt文件,并删除，可方便替换PC或安卓的启动参数
#参数为metadata.pegasus.txt文件
function split_metadata()
{
#把windows格式的换行符转换成unix格式的换行符
	dos2unix "$1"
	sed -n -e '/launch:/,$d;w '"$METADATA_TITLE"'' "$1"
	sed  -n -e '/game:/,$d;/^[[:space:]]*$/d;/launch:/,$w '"$METADATA_LAUNCH"'' "$1"
#	sed -n -e '/^[[:space:]]*$/d;/game:/,$w '"$METADATA_GAMES"'' "$1"
	sed -n -e '/game:/,$w '"$METADATA_GAMES"'' "$1"
	rm -rf "$1"
}
function merge_metadata()
{
:
}
#获取两个关联数组，一个以游戏名为key，value为包含rom地址的数组，一个以游戏名为key，value为meida目录下游戏名对应的同名子目录地址
#它的参数是分割出来的metadata_games文件
function generate_database()
{
	exec 4>&2
	exec 2>"$LOG"
	exec 3<&0
	exec 0<"$1"
	local key=""
	local value=""
	local tmp_string
	local -i serial_number=0
	local OLDIFS=$IFS
	IFS=
	shopt -s globstar
	while read -r line
	do
#跳过空白行
		if [[ "$line" =~ ^[[:space:]]*$ ]]
		then
			continue
		elif [[ "$line" =~ ^game: ]]
		then
			key=${line#game: }
			value="array"$serial_number
			eval declare -a "$value"
			let serial_number++
			games_roms["$key"]="$value"
		elif [[ "$line" =~ ^file: ]]
		then
			line=${line#file: }
			if [ -e $SOURCE_DIR/**/"$line" ]
			then
				tmp_string=`ls $SOURCE_DIR/**/"$line"`
				eval $value[\${#$value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
		elif [[ "$line" =~ ^files: ]]
		then
			line=${line#files:}
			if [[ ! "$line" =~ ^[[:space:]]*$ ]]
			then
#这里为IFS赋值旨在去除字符串的前导空格
				IFS=$OLDIFS
				line=`echo $line`
				if [ -e $SOURCE_DIR/**/"$line" ]
				then
					tmp_string=`ls $SOURCE_DIR/**/"$line"`
					eval $value[\${#$value[@]}]="\$tmp_string"
				else
					echo "file: $line can't be find.">&2
				fi
				IFS=
			fi
#非空白行，有前导空白的，属于上一个key的值
		elif [ "${line:0:1}" == " " ]
		then
			IFS=$OLDIFS
			line=`echo $line`
			if [ -e $SOURCE_DIR/**/"$line" ]
			then
				tmp_string=`ls $SOURCE_DIR/**/"$line"`
				eval $value[\${#$value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
			IFS=
		fi
	done
#测试
	declare -p games_roms
	declare -p array9
	echo ${#games_roms[@]}

	shopt -u globstar
	IFS=$OLDIFS
	exec 0<&3
	exec 2>&4
}
