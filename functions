#help information
function help()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Usage:
---------------------------------------------------------------------------------------------

EOF
}
#version information
function version()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Name: pegasus_roms_handle
Version: 1.00
Author: goddog312
contact:1820034020@qq.com
---------------------------------------------------------------------------------------------
EOF
}
#install dependencies
#install sed
function install_sed()
{
	if command -v sed &>/dev/null
	then
		echo "sed工具已安装。"
	else
		echo "脚本需要sed工具。"
		if command -v apt &>/dev/null
		then
			sudo apt update
			sudo apt install -y sed
		elif command -v dnf &>/dev/null
		then
			sudo dnf install -y sed
		elif command -v yum &>/dev/null
		then
			sudo yum install -y sed
		else
			echo "请手动安装sed工具。"
			exit 1
		fi
		echo "sed工具已安装。"
	fi
}
#install dos2unix
function install_dos2unix()
{
	if command -v dos2unix &>/dev/null
	then
		echo "dos2unix工具已安装。"
	else
		echo "脚本需要dos2unix工具。"
		if command -v apt &>/dev/null
		then
			sudo apt update
			sudo apt install -y dos2unix
		elif command -v dnf &>/dev/null
		then
			sudo dnf install -y dos2unix
		elif command -v yum &>/dev/null
		then
			sudo yum install -y dos2unix
		else
			echo "请手动安装dos2unix工具。"
			exit 1
		fi
		echo "dos2unix工具已安装。"
	fi
}
#install 7z
function install_7z()
{
	if command -v 7z &>/dev/null
	then
		echo "7z工具已安装。"
	else
		echo "脚本需要7z工具。"
		if command -v apt &>/dev/null
		then
			sudo apt update
			sudo apt install -y p7zip-full
		elif command -v dnf &>/dev/null
		then
			sudo dnf install -y p7zip-full
		elif command -v yum &>/dev/null
		then
			sudo yum install -y p7zip-full
		else
			echo "请手动安装7z工具。"
			exit 1
		fi
		echo "7z工具已安装。"
	fi
}
#install zenity
function install_zenity()
{
	if command -v zenity &>/dev/null
	then
		echo "zenity工具已安装。"
	else
		echo "脚本需要zenity工具。"
#判断包管理器
		if command -v apt &>/dev/null
		then
#使用apt(Debian/Ubuntu)
			sudo apt update
			sudo apt install -y zenity
		elif command -v dnf &>/dev/null
		then
#使用dnf(Fedora)
			sudo dnf install -y zenity
		elif command -v yum &>/dev/null
		then
#使用yum(CentOS/Red Hat)
			sudo yum install -y zenity
		else
			echo "请手动安装zenity工具。"
			exit 1
		fi
		echo "zenity工具已安装。"
	fi
}
#如果不存在源目录就创建源目录，源目录为空时提醒用户将指定文件放入源目录并退出。
#如果不存在工作目录就创建工作目录。
#保证源目录内存在待处理文件。
function haswkdir()
{
	if [ ! -d $SOURCE_DIR ] || [ "`ls -A $SOURCE_DIR`" = "" ]
	then
		mkdir $SOURCE_DIR
		zenity --info --width=$WIDTH --height=$HEIGHT --title="注意" --text="Put metadata.pegasus.txt and corresponding compressed package to $SOURCE_DIR. Then launch this script again."
		#SOURCE_DIR目录不存在或为空时退出脚本
		exit 0
	fi
	if [ ! -d $TRANSF_DIR ]
	then
		mkdir $TRANSF_DIR
	fi
	if [ ! -d $TARGET_DIR ]
	then
		mkdir $TARGET_DIR
	fi
}

#验证SOURCE_DIR目录内的文件
function check_source()
{
	local compressed_files_count
	local metadata_file
	local metadata_file_count
	local -a metadata_file_array
	local OLDIFS=$IFS
#是否有tkzlm后缀的文件
#找到tkzlm后缀的文件并解压
	compressed_files_count=`find $SOURCE_DIR -name *.tkzlm|wc -l`
	if [ $compressed_files_count -gt 0 ]
	then
		uncompress
	else
		echo "There's no compressed file.">&2
	fi
	check_target
#是否有且仅有一个metadata.pegasus.txt文件
	metadata_file_count=`find $SOURCE_DIR -name metadata.pegasus.txt|wc -l`
	while [ $metadata_file_count -ne 1 ]
	do
		if [ $metadata_file_count -lt 1 ]
		then
#由于没有提供metadata.pegasus.txt文件，这里将提供一个默认的metadata.pegasus.txt文件，在匹配的时候可能产生错误
			zenity --info --width=$WIDTH --height=$HEIGHT --title="缺少metadata.pegasus.txt文件" --text="由于没有提供metadata.pegasus.txt文件，这里将提供一个默认的metadata.pegasus.txt文件(默认PC平台)，在匹配的时候可能产生错误"
			cp "$METADATA_DIR/PC/$ROMS_SUB_DIRNAME/metadata.pegasus.txt" "$SOURCE_DIR"
#			zenity --error --width=$WIDTH --height=$HEIGHT --title="错误" --text="Need the file named metadata.pegasus.txt. Put it in the $SOURCE_DIR. Then launch this script again."
#			exit 1
		elif [ $metadata_file_count -gt 1 ]
		then
#由于metadata.pegasus.txt文件的数量多于1，这里将提供文件选择器用于删除多余的metadata.pegasus.txt文件
			zenity --info --width=$WIDTH --height=$HEIGHT --title="多余的metadata.pegasus.txt文件" --text="由于有多余的metadata.pegasus.txt文件，请选择你要删除的metadata.pegasus.txt文件"
			metadata_file=$(zenity --file-selection --width=$WIDTH --height=$HEIGHT --filename="source/*" --multiple --file-filter="metadata.pegasus.txt")
			if [ $? -ne 0 ]
			then
				continue
			else
				IFS='|'
				read -ra metadata_file_array <<<"$metadata_file"
				IFS=$OLDIFS
				for metadata_file in "${metadata_file_array[@]}"
				do
					if [[ $metadata_file =~ ^$SOURCE_DIR.*$ ]]
					then
						rm -f "$metadata_file"
					else
						echo "非法的文件$metadata_file，只能删除$SOURCE_DIR目录内的文件" >&2
					fi
				done
			fi
#			zenity --error --width=$WIDTH --height=$HEIGHT --title="错误" --text="More than one metadata.pegasus.txt. Delete the extra files. Then launch this script again."
#			exit 1
		fi
		metadata_file_count=`find $SOURCE_DIR -name metadata.pegasus.txt|wc -l`
	done
	metadata_file=`find $SOURCE_DIR -name metadata.pegasus.txt`
	split_metadata "$metadata_file"
}
#参数：压缩文件
#解压缩tkzlm后缀的压缩包,并删除
function uncompress()
{
	local compressed_file
	shopt -s globstar
	for compressed_file in $SOURCE_DIR/**/*.tkzlm
	do
		7z x "$compressed_file" -o$TRANSF_DIR -p跳坑者联盟 -aos
#		rm -rf "$compressed_file"
	done
	shopt -u globstar
}
#分割metadata.pegasus.txt文件,并删除，可方便替换PC或安卓的启动参数
#参数为metadata.pegasus.txt文件
function split_metadata()
{
	local metadata_file=$TRANSF_DIR/"metadata_file"
	touch "$metadata_file"
#把windows格式的换行符转换成unix格式的换行符
	dos2unix -n "$1" "$metadata_file"
	sed -n -e '/launch:/,$d;w '"$METADATA_TITLE"'' "$metadata_file"
	sed  -n -e '/game:/,$d;/^[[:space:]]*$/d;/launch:/,$w '"$METADATA_LAUNCH"'' "$metadata_file"
#	sed -n -e '/^[[:space:]]*$/d;/game:/,$w '"$METADATA_GAMES"'' "$metadata_file"
	sed -n -e '/game:/,$w '"$METADATA_GAMES"'' "$metadata_file"
	rm -rf "$metadata_file"
}
#获取三个关联数组
#games_roms	游戏名->rom地址的数组名->rom地址数组
#games_medias	游戏名->rom文件名对应的media目录下子目录地址
#games_descriptions	游戏名->description字段的字符串
#它的参数是分割出来的metadata_games文件
function generate_database()
{
	exec 3<&0
	exec 0<"$1"
#用作打印进度
	local -i total_lines=$(cat "$1"|wc -l)
	local -i index=1
	local array_key=""
	local array_value=""
	local tmp_string
	local -i serial_number=0
	local OLDIFS=$IFS
	IFS=
	shopt -s globstar
	coproc zenity --progress --width=$WIDTH --height=$HEIGHT --title="数据生成中" --text="正在读取游戏数据文件" --percentage=0 --no-cancel --auto-close
	while read -r line
	do
#显示处理进度条
		echo $((index*100/total_lines))
		((index++))
#跳过空白行
		if [[ "$line" =~ ^[[:space:]]*$ ]]
		then
			continue
		elif [[ "$line" =~ ^game: ]]
		then
			array_key=${line#game: }
			array_value="array"$serial_number
#在函数内定义的数组，必须定义成全局变量
			eval declare -ag "$array_value"
			let serial_number++
			games_roms["$array_key"]="$array_value"
		elif [[ "$line" =~ ^file: ]]
		then
			line=${line#file: }
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
			if [ -e $TRANSF_DIR/**/"$line" ]
			then
				tmp_string=`ls $TRANSF_DIR/**/"$line"`
				eval $array_value[\${#$array_value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
#games_medias	去除rom文件后缀
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
			line=${line%.*}
			if [ -d $TRANSF_DIR/**/media/"$line" ]
			then
				tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
				games_medias["$array_key"]="$tmp_string"
			else
				echo "由file字段推断出的derectory: /media/$line can't be find.">&2
			fi
		elif [[ "$line" =~ ^files: ]]
		then
			line=${line#files:}
			if [[ ! "$line" =~ ^[[:space:]]*$ ]]
			then
#这里为IFS赋值旨在去除字符串的前导空格
				IFS=$OLDIFS
				line=`echo $line`
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
				if [ -e $TRANSF_DIR/**/"$line" ]
				then
					tmp_string=`ls $TRANSF_DIR/**/"$line"`
					eval $array_value[\${#$array_value[@]}]="\$tmp_string"
				else
					echo "file: $line can't be find.">&2
				fi
				IFS=
#games_medias	针对files字段，应该去除rom名，留下rom名前面的目录名
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
				line=${line%/*}
				if [ -d $TRANSF_DIR/**/media/"$line" ]
				then
					tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
					games_medias["$array_key"]="$tmp_string"
				else
					echo "由files字段推断出的derectory: /media/$line can't be find.">&2
				fi
			fi
#非空白行，有前导空白的，属于上一个array_key的值
		elif [ "${line:0:1}" == " " ]
		then
			IFS=$OLDIFS
			line=`echo $line`
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
			if [ -e $TRANSF_DIR/**/"$line" ]
			then
				tmp_string=`ls $TRANSF_DIR/**/"$line"`
				eval $array_value[\${#$array_value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
			IFS=
#games_medias	针对files字段，应该去除rom名，留下rom名前面的目录名
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
			line=${line%/*}
			if [ -d $TRANSF_DIR/**/media/"$line" ]
			then
				tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
				games_medias["$array_key"]="$tmp_string"
			else
				echo "由前导空白字段推断出的derectory: /media/$line can't be find.">&2
			fi
		elif [[ "$line" =~ ^description: ]]
		then
#games_descriptions
			line=${line#description: }
#核对对应的rom地址是否存在，只有rom地址存在才添加描述
			eval tmp_string="\${#${games_roms["$array_key"]}[@]}"
			if [ $tmp_string -ge 1 ]
			then
				games_descriptions["$array_key"]="$line"
			fi
#games_medias	拥有assets.box_front	assets.logo	assets.video等字段的条目，将用此处推断出的目录覆盖前面推断出的media目录
		elif [[ "$line" =~ ^assets\..*: ]]
		then
			line=${line#*media/}
			line=${line%/*}
			if [ -d $TRANSF_DIR/**/media/"$line" ]
			then
				tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
				games_medias["$array_key"]="$tmp_string"
			else
				echo "由assets字段推断出的derectory: /media/$line can't be find.">&2
			fi
		fi
	done>& ${COPROC[1]}
#######################
#测试
#	declare -p games_roms
#	declare -p games_descriptions
#	declare -p games_medias
#	echo ${#games_roms[@]}
#	echo ${#games_descriptions[@]}
#	echo ${#games_medias[@]}
###########################
	shopt -u globstar
	IFS=$OLDIFS
	exec 0<&3
	wait $COPROC_PID
}
#显示游戏的选择框，返回所选择的游戏
#返回所选游戏名的字符串，每个游戏名由'|'分割
function select_interface()
{
	local tmp_str=""
	local key
	local value
	for key in "${!games_descriptions[@]}"
	do
		value="${games_descriptions[$key]}"
		tmp_str=$tmp_str"TRUE ""\"$key\""" ""\"$value\""" "
	done
	eval zenity --width=$WIDTH --height=$HEIGHT --title="游戏选择" --text="选择你需要的游戏" --list --checklist --column="选择" --column="游戏名" --column="描述" $tmp_str
}
#获取数组games_selected
function select_result()
{
	local tmp_str=$(select_interface)
	if [ -z "$tmp_str" ]
	then
		zenity --width=$WIDTH --height=$HEIGHT --info --title="未选择" --text="你并未选择任何rom,将清理中间文件并退出脚本" --timeout=10
		clearup
		exit 0
	else
		local OLDIFS=$IFS
		IFS='|'
		read -ra games_selected <<<"$tmp_str"
		IFS=$OLDIFS
	fi
}
#解压缩完成后，transf目录内应该只有一个roms目录，如果有多余的roms目录，那么可能是tkzlm后缀的压缩文件不只一个游戏种类，这种情况无法处理
function check_target()
{
	local dir=""
	local count_dir=`ls -d $TRANSF_DIR/*/|wc -l`
	if [ $count_dir -ne 1 ]
	then
		zenity --error --width=$WIDTH --height=$HEIGHT --title="错误" --text="无法同时处理多个不同种类游戏的rom，请检查压缩文件，并重新执行脚本.或者删除transf目录内不是你目标的子目录。"
		exit 1
	else
		dir=`ls -d $TRANSF_DIR/*/`
		ROMS_SUB_DIRNAME=${dir##*/transf/}
		ROMS_SUB_DIRNAME=${ROMS_SUB_DIRNAME%/*}
		mkdir -p $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
	fi
}
#按照games_selected移动相应rom及media文件到target目录中去
function move_files()
{
	local key
	local tmp_array
	local -i tmp_array_length=0
	local -i index=0
	local file
	local sub_dir
	for key in "${games_selected[@]}"
	do
		tmp_array=${games_roms["$key"]}
		eval tmp_array_length=\${\#$tmp_array\[@\]}
		if [ $tmp_array_length -gt 1 ]
		then
#rom文件多于1个的，需要先创建子目录，再移动rom
			eval sub_dir=\"\${$tmp_array[0]}\"
			sub_dir=${sub_dir%/*}
			sub_dir=${sub_dir##*/}
#创建子目录
			mkdir -p $TARGET_DIR/"$ROMS_SUB_DIRNAME"/"$sub_dir"
#移动rom文件
			for((index=0;index<tmp_array_length;index++))	
			do
				eval file=\"\${$tmp_array[$index]}\"
				mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/"$sub_dir"
			done
#移动media下的子目录
			file="${games_medias[$key]}"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
		elif [ $tmp_array_length -lt 1 ]
		then
#rom文件少于1个的说明前面generate_database出现问题，警告并退出
			zenity --error --width=$WIDTH --height=$HEIGHT --title="错误" --text="rom数据文件错误."
			exit 1
		else
#只有一个rom文件的情况
#移动rom文件
			eval file=\"\${$tmp_array[0]}\"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"
#移动media下的子目录
			file="${games_medias[$key]}"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
		fi
	done
}
#选择安卓或者PC
#这里将从metadata目录中提取对应的metadata.pegasus.txt文件的title和launch部分
function select_platform()
{
	while true
	do
		local platform=$(zenity --width=$WIDTH --height=$HEIGHT --title="游戏平台选择" --text="选择你所使用的游戏平台，以生成对应的metadata.pegasus.txt文件,\n取消选择则使用你放入$SOURCE_DIR目录内的metadata.pegusus.txt文件所指平台" --list --radiolist --column="选择" --column="游戏平台" true android false PC)
		if [ -n "$platform" ]
		then
			local metadata_file=$METADATA_DIR"/$platform/$ROMS_SUB_DIRNAME/metadata.pegasus.txt"
			if [ -f "$metadata_file" ]
			then
				local new_metadata_file="$TRANSF_DIR/metadata.pegasus.txt"
				touch "$new_metadata_file"
				dos2unix -n "$metadata_file" "$new_metadata_file"
				sed -n -e '/launch:/,$d;w '"$METADATA_TITLE"'' "$new_metadata_file"
				sed  -n -e '/game:/,$d;/^[[:space:]]*$/d;/launch:/,$w '"$METADATA_LAUNCH"'' "$new_metadata_file"
				rm -rf "$new_metadata_file"
				zenity --width=$WIDTH --height=$HEIGHT --title="游戏平台选择" --text="导入$platform平台metadata.pegasus.txt文件" --info --timeout=2
				break
			else
				zenity --width=$WIDTH --height=$HEIGHT --title="游戏平台选择" --text="$platform平台$metadata_file文件不存在,请重新选择" --info --timeout=2
				continue
			fi
		else
			zenity --width=$WIDTH --height=$HEIGHT --title="游戏平台选择" --text="保留原始metadata.pegasus.txt文件" --info --timeout=2
			break
		fi
	done
}
#合并metadata.pegasus.txt文件
function merge_metadata()
{
#是否要删除metadata_games文件中未被选中的games条目
#合并metadata_title metadata_launch metadata_games三个文件生成新的metadata.pegasus.txt
	local metadata_file="$TARGET_DIR/$ROMS_SUB_DIRNAME/metadata.pegasus.txt"
	touch "$metadata_file"
	cat "$METADATA_TITLE">>"$metadata_file"
	cat "$METADATA_LAUNCH">>"$metadata_file"
	echo "">>"$metadata_file"
	cat "$METADATA_GAMES">>"$metadata_file"
#转换为windows换行符格式
	unix2dos "$metadata_file"
}
#完成后做最后的清理工作
#0	删除脚本自身以外的所有文件及目录
#1	删除除target目录、logfile、及脚本自身以外的所有文件
#2	删除除source目录、logfile、及脚本自身以外的所有文件，恢复到未处理前的状态，方便查看logfile并再次进行处理
#3	删除除source目录、target目录、logfile、及脚本自身以外的所有文件
#4	保留所有中间文件，方便debug
function clearup()
{
	local select=$(zenity --width=$WIDTH --height=$HEIGHT --title="选择文件清理等级" --text="0	删除脚本自身以外的所有文件及目录\n1	删除除target目录、logfile、及脚本自身以外的所有文件\n2	删除除source目录、logfile、及脚本自身以外的所有文件，恢复到未处理前的状态，方便查看logfile并再次进行处理\n3	删除除source目录、target目录、logfile、及脚本自身以外的所有文件\n4	保留所有中间文件，方便debug\n" --list --radiolist --column="选择" --column="清理等级" false 0 false 1 false 2 false 3 true 4)
	case "$select" in
	0)
		rm -rf $SOURCE_DIR $TRANSF_DIR $TARGET_DIR $LOG
		zenity --notification  --text="处理未完成，已清理所有文件"
		;;
	1)
		rm -rf $SOURCE_DIR $TRANSF_DIR
		zenity --notification  --text="处理已完成,删除源文件，目标文件在\n$TARGET_DIR目录内"
		;;
	2)
		rm -rf $TRANSF_DIR $TARGET_DIR
		zenity --notification  --text="处理未完成，已恢复初始状态，请重新处理"
		;;
	3)
		rm -rf $TRANSF_DIR
		zenity --notification  --text="处理已完成，保留源文件,目标文件在\n$TARGET_DIR目录内"
		;;
	4)
		zenity --notification  --text="保留源文件，过程文件及目标文件"
		;;
	esac
}
