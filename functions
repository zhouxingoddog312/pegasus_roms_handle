#help information
function help()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Usage:
---------------------------------------------------------------------------------------------

EOF
}
#version information
function version()
{
	cat <<EOF
---------------------------------------------------------------------------------------------
Name: 
Version: 1.00
Author: goddog312
---------------------------------------------------------------------------------------------

EOF
}
#如果不存在源目录就创建源目录，源目录为空时提醒用户将指定文件放入源目录并退出。
#如果不存在工作目录就创建工作目录。
#保证源目录内存在待处理文件。
function haswkdir()
{
	if [ ! -d $SOURCE_DIR ] || [ "`ls -A $SOURCE_DIR`" = "" ]
	then
		mkdir $SOURCE_DIR
		echo "Put metadata.pegasus.txt and corresponding compressed package to $SOURCE_DIR. Then launch this script again."
		#SOURCE_DIR目录不存在或为空时退出脚本
		exit 0
	fi
	if [ ! -d $TRANSF_DIR ]
	then
		mkdir $TRANSF_DIR
	fi
	if [ ! -d $TARGET_DIR ]
	then
		mkdir $TARGET_DIR
	fi
}

#验证SOURCE_DIR目录内的文件
function check_source()
{
#是否有且仅有一个metadata.pegasus.txt文件
	local metadata_file_count=`find $SOURCE_DIR -name metadata.pegasus.txt|wc -l`
	if [ $metadata_file_count -lt 1 ]
	then
		zenity --error --width=180 --height=180 --title="错误" --text="Need the file named metadata.pegasus.txt. Put it in the $SOURCE_DIR. Then launch this script again."
		exit 1
	elif [ $metadata_file_count -gt 1 ]
	then
		zenity --error --width=180 --height=180 --title="错误" --text="More than one metadata.pegasus.txt. Delete the extra files. Then launch this script again."
		exit 1
	fi
	local metadata_file=`find $SOURCE_DIR -name metadata.pegasus.txt`
	split_metadata "$metadata_file"
#是否有tkzlm后缀的文件
#找到tkzlm后缀的文件并解压
	local compress_files_count=`find $SOURCE_DIR -name *.tkzlm|wc -l`
	if [ $compress_files_count -gt 0 ]
	then
		uncompress
	else
		echo "There's no compressed file."
	fi
}

#参数：压缩文件
#解压缩tkzlm后缀的压缩包,并删除
function uncompress()
{
	local compressed_file
	shopt -s globstar
	for compressed_file in $SOURCE_DIR/**/*.tkzlm
	do
		7z x "$compressed_file" -o$TRANSF_DIR -p跳坑者联盟 -aos
		rm -rf "$compressed_file"
	done
	shopt -u globstar
}
#分割metadata.pegasus.txt文件,并删除，可方便替换PC或安卓的启动参数
#参数为metadata.pegasus.txt文件
function split_metadata()
{
#把windows格式的换行符转换成unix格式的换行符
	dos2unix "$1"
	sed -n -e '/launch:/,$d;w '"$METADATA_TITLE"'' "$1"
	sed  -n -e '/game:/,$d;/^[[:space:]]*$/d;/launch:/,$w '"$METADATA_LAUNCH"'' "$1"
#	sed -n -e '/^[[:space:]]*$/d;/game:/,$w '"$METADATA_GAMES"'' "$1"
	sed -n -e '/game:/,$w '"$METADATA_GAMES"'' "$1"
	rm -rf "$1"
}
#合并metadata.pegasus.txt文件
function merge_metadata()
{
:
}
#获取三个关联数组
#games_roms	游戏名->rom地址的数组名->rom地址数组
#games_medias	游戏名->rom文件名对应的media目录下子目录地址
#games_descriptions	游戏名->description字段的字符串
#它的参数是分割出来的metadata_games文件
function generate_database()
{
	exec 4>&2
	exec 2>"$LOG"
	exec 3<&0
	exec 0<"$1"
	local key=""
	local value=""
	local tmp_string
	local -i serial_number=0
	local OLDIFS=$IFS
	IFS=
	shopt -s globstar
	while read -r line
	do
#跳过空白行
		if [[ "$line" =~ ^[[:space:]]*$ ]]
		then
			continue
		elif [[ "$line" =~ ^game: ]]
		then
			key=${line#game: }
			value="array"$serial_number
#在函数内定义的数组，必须定义成全局变量
			eval declare -ag "$value"
			let serial_number++
			games_roms["$key"]="$value"
		elif [[ "$line" =~ ^file: ]]
		then
			line=${line#file: }
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
			if [ -e $TRANSF_DIR/**/"$line" ]
			then
				tmp_string=`ls $TRANSF_DIR/**/"$line"`
				eval $value[\${#$value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
#games_medias	去除rom文件后缀
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
			line=${line%.*}
			if [ -d $TRANSF_DIR/**/media/"$line" ]
			then
				tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
				games_medias["$key"]="$tmp_string"
			else
				echo "derectory: /media/$line can't be find.">&2
			fi
		elif [[ "$line" =~ ^files: ]]
		then
			line=${line#files:}
			if [[ ! "$line" =~ ^[[:space:]]*$ ]]
			then
#这里为IFS赋值旨在去除字符串的前导空格
				IFS=$OLDIFS
				line=`echo $line`
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
				if [ -e $TRANSF_DIR/**/"$line" ]
				then
					tmp_string=`ls $TRANSF_DIR/**/"$line"`
					eval $value[\${#$value[@]}]="\$tmp_string"
				else
					echo "file: $line can't be find.">&2
				fi
				IFS=
#games_medias	针对files字段，应该去除rom名，留下rom名前面的目录名
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
				line=${line%/*}
				if [ -d $TRANSF_DIR/**/media/"$line" ]
				then
					tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
					games_medias["$key"]="$tmp_string"
				else
					echo "derectory: /media/$line can't be find.">&2
				fi
			fi
#非空白行，有前导空白的，属于上一个key的值
		elif [ "${line:0:1}" == " " ]
		then
			IFS=$OLDIFS
			line=`echo $line`
#games_roms	添加roms文件地址，若存在则添加到数组里，若不存在则报错
			if [ -e $TRANSF_DIR/**/"$line" ]
			then
				tmp_string=`ls $TRANSF_DIR/**/"$line"`
				eval $value[\${#$value[@]}]="\$tmp_string"
			else
				echo "file: $line can't be find.">&2
			fi
			IFS=
#games_medias	针对files字段，应该去除rom名，留下rom名前面的目录名
#games_medias	添加rom文件名对应media下子目录，若目录不存在则报错
			line=${line%/*}
			if [ -d $TRANSF_DIR/**/media/"$line" ]
			then
				tmp_string=`ls -d $TRANSF_DIR/**/media/"$line"`
				games_medias["$key"]="$tmp_string"
			else
				echo "derectory: /media/$line can't be find.">&2
			fi
		elif [[ "$line" =~ ^description: ]]
		then
#games_descriptions
			line=${line#description: }
#核对对应的rom地址是否存在，只有rom地址存在才添加描述
			eval tmp_string="\${#${games_roms["$key"]}[@]}"
			if [ $tmp_string -ge 1 ]
			then
				games_descriptions["$key"]="$line"
			fi
		fi
	done
#######################
#测试
#	declare -p games_roms
#	declare -p games_descriptions
#	declare -p games_medias
#	echo ${#games_roms[@]}
#	echo ${#games_descriptions[@]}
#	echo ${#games_medias[@]}
###########################
	shopt -u globstar
	IFS=$OLDIFS
	exec 0<&3
	exec 2>&4
}
#显示游戏的选择框，返回所选择的游戏
#返回所选游戏名的字符串，每个游戏名由'|'分割
function select_interface()
{
	local tmp_str=""
	local key
	local value
	for key in "${!games_descriptions[@]}"
	do
		value="${games_descriptions[$key]}"
		tmp_str=$tmp_str"TRUE ""\"$key\""" ""\"$value\""" "
	done
	eval zenity --width=180 --height=180 --title="游戏选择" --text="选择你需要的游戏" --list --checklist --column="选择" --column="游戏名" --column="描述" $tmp_str
}
#获取数组games_selected
function select_result()
{
	local tmp_str=$(select_interface)
	local OLDIFS=$IFS
	IFS='|'
	read -ra games_selected <<<"$tmp_str"
}
#解压缩完成后，transf目录内应该只有一个roms目录，如果有多余的roms目录，那么可能是tkzlm后缀的压缩文件不只一个游戏种类，这种情况无法处理
function check_target()
{
	local dir=""
	local count_dir=`ls -d $TRANSF_DIR/*/|wc -l`
	if [ $count_dir -ne 1 ]
	then
		zenity --error --width=180 --height=180 --title="错误" --text="无法同时处理多个不同种类游戏的rom，请检查压缩文件，并重新执行脚本.或者删除transf目录内不是你目标的子目录。"
	else
		dir=`ls -d $TRANSF_DIR/*/`
		ROMS_SUB_DIRNAME=${dir##*/transf/}
		mkdir -p $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
	fi
}
#按照games_selected移动相应rom及media文件到target目录中去
function move_files()
{
	local key
	local tmp_array
	local -i tmp_array_length=0
	local -i index=0
	local file
	local sub_dir
	for key in "${games_selected[@]}"
	do
		tmp_array=${games_roms["$key"]}
		eval tmp_array_length=\${\#$tmp_array\[@\]}
		if [ $tmp_array_length -gt 1 ]
		then
#rom文件多于1个的，需要先创建子目录，再移动rom
			eval sub_dir=\"\${$tmp_array[0]}\"
			sub_dir=${sub_dir%/*}
			sub_dir=${sub_dir##*/}
#创建子目录
			mkdir -p $TARGET_DIR/"$ROMS_SUB_DIRNAME"/"$sub_dir"
#移动rom文件
			for((index=0;index<tmp_array_length;index++))	
			do
				eval file=\"\${$tmp_array[$index]}\"
				mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/"$sub_dir"
			done
#移动media下的子目录
			file="${games_medias[$key]}"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
		elif [ $tmp_array_length -lt 1 ]
		then
#rom文件少于1个的说明前面generate_database出现问题，警告并退出
			zenity --error --width=180 --height=180 --title="错误" --text="rom数据文件错误."
			exit 1
		else
#只有一个rom文件的情况
#移动rom文件
			eval file=\"\${$tmp_array[0]}\"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"
#移动media下的子目录
			file="${games_medias[$key]}"
			mv "$file" $TARGET_DIR/"$ROMS_SUB_DIRNAME"/media/
		fi
	done
}
